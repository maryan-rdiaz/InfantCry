import streamlit as st
import tempfile
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import librosa
import numpy as np
import pandas as pd
import io
import base64


# ------------- Importacion de funciones personalizadas ----------------
from audio_processing.librosa_utils import (
    cargar_audio_desde_bytes,
    calcular_duracion,
    #graficar_espectrograma_librosa,
    calcular_zcr,
)

from audio_processing.praat_utils import (
    cargar_sonido_praat,
    #graficar_espectrograma_praat,
    obtener_frecuencia_fundamental,
    calcular_jitter_shimmer,
)

from audio_processing.cry_detection import (
    detectar_llanto,
    detectar_segmentos_llanto,
)

from utils.energia import graficar_energia
from utils.tiempo import detectar_tiempos_llanto

from utils.visualizacion import (
    graficar_espectrograma_praat_interactivo,
    graficar_curva_f0,
    graficar_zcr_plotly,
)
#-----------------------------------------------------------------------------

st.set_page_config(page_title="An√°lisis de Llanto Infantil", layout="wide")

# -----------------------------Men√∫ lateral ---------------------------------
st.sidebar.title("üîç Opciones de An√°lisis")

mostrar_todos = st.sidebar.checkbox("‚úÖ Mostrar todos")
mostrar_info_general = st.sidebar.checkbox("üìÑ Informaci√≥n General", value=mostrar_todos, disabled=mostrar_todos)
mostrar_espectrograma = st.sidebar.checkbox("üéõÔ∏è Espectrograma", value=mostrar_todos, disabled=mostrar_todos)
mostrar_f0 = st.sidebar.checkbox("üìà Frecuencia Fundamental", value=mostrar_todos, disabled=mostrar_todos)
mostrar_jitter_shimmer = st.sidebar.checkbox("üìâ Jitter y Shimmer", value=mostrar_todos, disabled=mostrar_todos)
mostrar_zcr = st.sidebar.checkbox("üìä Zero-Crossing Rate", value=mostrar_todos, disabled=mostrar_todos)
mostrar_llanto = st.sidebar.checkbox("üß† Detecci√≥n de Llanto", value=mostrar_todos, disabled=mostrar_todos)

st.title("üë∂ An√°lisis de Llanto Infantil")
# Cargar el archivo .wav
archivo_audio = st.file_uploader("", type=["wav"])

if archivo_audio is not None:
    audio_bytes = archivo_audio.read()
    y, sr = cargar_audio_desde_bytes(audio_bytes)
    duracion = calcular_duracion(y, sr)

    # Mostrar reproductor siempre
    st.audio(archivo_audio, format="audio/wav")

    if mostrar_info_general:
        st.markdown(
            "<h4 style='text-align: center;'>üìÑ Informaci√≥n General</h4>",
            unsafe_allow_html=True
        )
        st.write(f"üïí **Duraci√≥n:** {duracion:.2f} segundos")
        minutos = int(duracion // 60)
        segundos = int(duracion % 60)
        st.write(f"‚è±Ô∏è **Duraci√≥n (mm:ss):** {minutos:02d}:{segundos:02d}")
        st.write(f"üéß **Frecuencia de muestreo:** {sr} Hz")
        st.write(f"üìä **N√∫mero de muestras:** {len(y)}")

        canales = 1 if len(y.shape) == 1 else y.shape[0]
        tipo_audio = "Mono" if canales == 1 else "Est√©reo"
        st.write(f"üîà **Canales:** {canales} ({tipo_audio})")

        st.write(f"üìà **Amplitud m√°xima:** {np.max(np.abs(y)):.3f}")
        rms = np.sqrt(np.mean(np.square(y)))
        st.write(f"üîã **Energ√≠a promedio (RMS):** {rms:.4f}")
        st.write(f"‚öñÔ∏è **Offset DC (valor medio):** {np.mean(y):.5f}")

    if mostrar_espectrograma:
        st.markdown(
            "<h4 style='text-align: center;'>üéõÔ∏è Espectrograma</h4>",
            unsafe_allow_html=True
        )
        with st.expander("‚ÑπÔ∏è "):
            st.write(""" Un espectrograma es una representaci√≥n visual de c√≥mo var√≠an las frecuencias de una 
                se√±al de audio a lo largo del tiempo. En el eje horizontal se muestra el tiempo, en el vertical
                 la frecuencia, y la intensidad de color representa la energ√≠a (amplitud) de cada frecuencia en 
                 un momento dado.
                 \nEl espectrograma permite observar patrones ac√∫sticos espec√≠ficos del llanto, como la presencia de formantes, 
                 ruidos, interrupciones o picos de energ√≠a. Estas caracter√≠sticas pueden estar relacionadas 
                 con estados fisiol√≥gicos o emocionales del beb√© y son √∫tiles para distinguir entre llantos 
                 normales y aquellos que podr√≠an indicar un problema m√©dico.
                 \nAl interactuar con el espectrograma, ver√°s tres valores en el cursor:
                 \n- **X**: Tiempo (segundos) -  Indica en qu√© momento del audio est√°s posicionado.
                 \n- **Y**: Frecuencia (Hz) - Muestra la frecuencia correspondiente a la posici√≥n vertical del cursor.
                 \n- **Z**: Intensidad (dB) - Representa la energ√≠a o amplitud de la se√±al en ese punto, expresada en decibeles.
                 \nEstos valores permiten analizar con precisi√≥n las caracter√≠sticas ac√∫sticas del llanto en cada instante del tiempo.
                """)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
            tmp_file.write(audio_bytes)
            tmp_path = tmp_file.name
        snd = cargar_sonido_praat(tmp_path)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".npz") as tmp_file:
            ruta_npz = tmp_file.name
        fig3 = graficar_espectrograma_praat_interactivo(snd, max_freq=5000, guardar_como=ruta_npz)
        st.plotly_chart(fig3, use_container_width=True)
        # Leer el contenido del archivo para la descarga
        with open(ruta_npz, "rb") as f:
            bytes_npz = f.read()

        # Bot√≥n de descarga
        st.download_button(
            label="‚¨áÔ∏è Descargar datos del espectrograma (.npz)",
            data=bytes_npz,
            file_name="espectrograma.npz",
            mime="application/octet-stream"
        )
    
    if mostrar_f0:
        st.markdown(
            "<h4 style='text-align: center;'>üìà Frecuencia Fundamental</h4>",
            unsafe_allow_html=True
        )

        with st.expander("‚ÑπÔ∏è "):
            st.write("""
                La frecuencia fundamental (F0) es la frecuencia m√°s baja de una se√±al peri√≥dica y representa
                 el tono percibido del llanto. Est√° relacionada con la vibraci√≥n de las cuerdas vocales del beb√©.

                \nAlteraciones en la F0 pueden reflejar cambios en el estado neurol√≥gico o fisiol√≥gico del beb√©. 
                \nEl rango t√≠pico de la frecuencia fundamental (F0) del llanto de un beb√© suele encontrarse entre: 250Hz y 600 Hz.
                \nAunque este rango puede variar dependiendo de:
                \n\tEdad gestacional: Los beb√©s prematuros tienden a tener F0 m√°s altas.
                \n\tEstado emocional o fisiol√≥gico: El llanto por dolor, hambre o incomodidad puede elevar la F0.
                \n\tPatolog√≠as: Algunas condiciones neurol√≥gicas o respiratorias pueden alterar significativamente el patr√≥n y la F0.
                \nRangos m√°s espec√≠ficos reportados en estudios:
                \nLlantos normales: 
                \n\tF0 promedio: entre 400 y 500 Hz
                \n\tF0 m√≠nima: alrededor de 250 Hz
                \n\tF0 m√°xima: puede alcanzar hasta 700 Hz o incluso m√°s en episodios agudos.
                \nLlantos patol√≥gicos (como en encefalopat√≠as o s√≠ndromes gen√©ticos):
                \n\tPueden mostrar F0 muy elevadas (> 800 Hz) o patrones inusuales
                """)
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
                tmp_file.write(audio_bytes)
                tmp_path = tmp_file.name
            
            snd = cargar_sonido_praat(tmp_path)
            f0_mean, f0_min, f0_max, (f0_times, f0_curve) = obtener_frecuencia_fundamental(snd)
            if f0_mean is not None:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.write(f"üü¢ **M√≠nima:** {f0_min:.2f} Hz")
                with col2:
                    st.write(f"üü° **Media:** {f0_mean:.2f} Hz")
                with col3:
                    st.write(f"üî¥ **M√°xima:** {f0_max:.2f} Hz")

                # Usar la funci√≥n actualizada que retorna tambi√©n los valores v√°lidos
                fig_f0, times_validos, f0_validos = graficar_curva_f0(f0_times, f0_curve)
                print(type(fig_f0))

                st.plotly_chart(fig_f0, use_container_width=True)

                # Crear DataFrame solo con valores filtrados
                df_f0 = pd.DataFrame({
                    'Tiempo (s)': times_validos,
                    'F0 (Hz)': f0_validos
                })

                # CSV en memoria para descarga
                csv_buffer = io.StringIO()
                df_f0.to_csv(csv_buffer, index=False)
                csv_data = csv_buffer.getvalue()

                # Escapar los caracteres especiales antes de usar en f-string
                csv_data_encoded = csv_data.replace('\n', '%0A').replace(',', '%2C')

                # Bot√≥n de descarga alineado a la derecha
                st.markdown(
                    f"""
                    <div style="display: flex; justify-content: flex-end; margin-top: 10px;">
                        <a href="data:text/csv;charset=utf-8,{csv_data_encoded}" download="f0_datos.csv">
                            <button style="background-color: #4CAF50; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer;">
                                üì• Descargar F0 (CSV)
                            </button>
                        </a>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            else:
                st.warning("No se pudo detectar la frecuencia fundamental.")
        except Exception as e:
            st.error(f"‚ö†Ô∏è Error: {e}")

    if mostrar_jitter_shimmer:
        st.markdown(
            "<h4 style='text-align: center;'>üìà Jitter y Shimmer</h4>",
            unsafe_allow_html=True
        )
        with st.expander("‚ÑπÔ∏è "):
            st.write("""
                üî∏ Jitter mide la variaci√≥n ciclo a ciclo en la frecuencia fundamental, es decir, la estabilidad 
                temporal de la vibraci√≥n vocal.
                \nUn jitter elevado puede reflejar inestabilidad vocal, t√≠picamente asociado con alteraciones 
                neuromusculares, fatiga, dolor, o problemas en la coordinaci√≥n respiratoria o lar√≠ngea.
                \nEl umbral de referencia utilizado en este sistema es: 1.0
                \nüîπ Shimmer mide la variaci√≥n ciclo a ciclo en la amplitud de la se√±al, es decir, la estabilidad
                en la intensidad vocal.
                \nUn shimmer elevado puede reflejar esfuerzo vocal, dificultades en el control de la intensidad o 
                alteraciones estructurales en las cuerdas vocales.
                \nEl umbral de referencia utilizado en este sistema es: 3.8
                \nValores anormales de jitter y shimmer pueden se√±alar disfunciones en el control neuromuscular
                o afectaciones en el sistema respiratorio o lar√≠ngeo del beb√©. 
                """)
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
                tmp_file.write(audio_bytes)
                tmp_path = tmp_file.name
            snd = cargar_sonido_praat(tmp_path)
            jitter, shimmer = calcular_jitter_shimmer(snd)
            jitter_percent = jitter * 100
            shimmer_percent = shimmer * 100
            umbral_jitter = 1.0
            umbral_shimmer = 3.8
            col1, col2 = st.columns(2)
            with col1:
                delta_j = jitter_percent - umbral_jitter
                st.metric("üî∏ Jitter", f"{jitter_percent:.2f} %", f"{delta_j:+.2f} %", delta_color="inverse" if delta_j > 0 else "normal")
            with col2:
                delta_s = shimmer_percent - umbral_shimmer
                st.metric("üîπ Shimmer", f"{shimmer_percent:.2f} %", f"{delta_s:+.2f} %", delta_color="inverse" if delta_s > 0 else "normal")
        except Exception as e:
            st.error(f"‚ö†Ô∏è Error: {e}")

    if mostrar_zcr:
        st.markdown(
            "<h4 style='text-align: center;'>üìä Tasa de Cruce por Cero</h4>",
            unsafe_allow_html=True
        )
        with st.expander("‚ÑπÔ∏è "):
            st.write("""
                La tasa de cruce por cero (ZCR) representa cu√°ntas veces la se√±al de audio cruza el eje cero 
                (cambia de signo) por unidad de tiempo. Es una m√©trica simple que indica la cantidad de oscilaciones 
                de alta frecuencia.
                \nUn ZCR alto puede estar asociado con se√±ales m√°s ruidosas o entrecortadas, lo que puede indicar
                angustia, esfuerzo respiratorio o llanto agudo. En cambio, un ZCR bajo sugiere llantos m√°s tonales
                y estables, a menudo asociados con estados menos cr√≠ticos.
                """)
        zcr = calcular_zcr(y)
        zcr_mean = np.mean(zcr)
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"üîÑ ZCR media: {zcr_mean:.4f}")
        with col2:
            if zcr_mean < 0.02:
                st.markdown("<span style='color:blue'>üü¢ Bajo ZCR</span>", unsafe_allow_html=True)
            elif zcr_mean < 0.05:
                st.markdown("<span style='color:orange'>üü° Moderado ZCR</span>", unsafe_allow_html=True)
            else:
                st.markdown("<span style='color:red'>üî¥ Alto ZCR</span>", unsafe_allow_html=True)
        fig_zcr = graficar_zcr_plotly(y, sr)
        st.plotly_chart(fig_zcr, use_container_width=True)
        
    if mostrar_llanto:
        st.markdown(
            "<h4 style='text-align: center;'>üß† Detecci√≥n de Llanto (en desarrollo)</h4>",
            unsafe_allow_html=True
        )
        
else:
    st.warning("Por favor, sube una muestra de llanto en formato .wav para comenzar.")

    